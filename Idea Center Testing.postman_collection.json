{
	"info": {
		"_postman_id": "9f4f5560-2fd2-4774-8588-062d12e89438",
		"name": "Idea Center Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28665653"
	},
	"item": [
		{
			"name": "Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.responseData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"accessToken\", pm.responseData.accessToken)\r",
							"\r",
							"pm.test(\"Response includes email, password and accessToken\", function () {\r",
							"    pm.expect(pm.responseData).to.be.an('object');\r",
							"    pm.expect(pm.responseData).to.have.property('email');\r",
							"    pm.expect(pm.responseData).to.have.property('password');\r",
							"    pm.expect(pm.responseData).to.have.property('accessToken');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"iv@test.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/User/Authentication",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create A New Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"const responseData= pm.response.json() \r",
							"\r",
							"pm.test(\"Response message is 'Successfully created!\", function() {\r",
							"    pm.expect( responseData.msg).to.be.eql(\"Successfully created!\")\r",
							"})\r",
							"\r",
							" const responsetitle= pm.collectionVariables.get(\"randomTitle\") \r",
							"\r",
							"pm.test(\"Response contains correct title and description\", function() {\r",
							"    pm.expect(responseData.idea.title).to.be.eql(responsetitle)\r",
							"    pm.expect(responseData.idea.description).to.be.eql(\"New description for idea with a title\" + \" \" + responsetitle)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomNumber=Math.floor(Math.random()*1000)\r",
							"\r",
							"var randomTitle=\"New created idea\" + \" \" + randomNumber \r",
							"\r",
							"pm.collectionVariables.set(\"randomTitle\", randomTitle)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{randomTitle}}\",\r\n    \"url\": \"\",\r\n    \"description\": \"New description for idea with a title {{randomTitle}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Idea/Create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Ideas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"const responseData= pm.response.json() \r",
							"\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    pm.expect(responseData).to.be.an(\"array\")\r",
							"})\r",
							"\r",
							" pm.test(\"Response has at least one item\", function() {\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0)    \r",
							"}) \r",
							"\r",
							"var lastIdeaId=responseData[responseData.length-1].id\r",
							"\r",
							"pm.collectionVariables.set(\"lastIdeaId\", lastIdeaId)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Idea/All",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit The Last Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"const responseData= pm.response.json() \r",
							"\r",
							"pm.test(\"Response message is 'Edited successfully'\", function() {\r",
							"    pm.expect( responseData.msg).to.be.eql(\"Edited successfully\")\r",
							"})\r",
							"\r",
							" \r",
							"\r",
							"pm.test(\"Response contains correct title and description\", function() {\r",
							"    pm.expect(responseData.idea.title).to.be.eql(\"Edited\")    \r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Edited\",\r\n    \"url\": \"\",\r\n    \"description\": \"New description for idea with a title {{randomTitle}}/Edited\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Idea/Edit?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"Edit"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete The Edited Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"const responseDataText= pm.response.text() \r",
							"\r",
							"pm.test(\"Response message is 'Edited successfully'\", function() {\r",
							"    pm.expect( responseDataText).to.a(\"string\")\r",
							"}) \r",
							"\r",
							"pm.test(\"Response contains correct title and description\", function() {\r",
							"    pm.expect(responseDataText).to.be.eql(\"The idea is deleted!\")    \r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Idea/Delete?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Idea",
						"Delete"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://softuni-qa-loadbalancer-2137572849.eu-north-1.elb.amazonaws.com:84",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "lastIdeaId",
			"value": ""
		}
	]
}